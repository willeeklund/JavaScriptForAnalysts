Ok, om du skulle göra om allt, hur skulle du göra då .. Ja ok, då kör vi.

Först en slide om dig själv, Alltså kort om vad du gjort på Netlight och Javascript världen,

Sedan slänga ut tre frågor, typ, Hur många här tycker att facebooks User Interface har blivit mer rappt (och därmed bättre) de senaste 5 åren ??

Hur många  blir imponerad över sånt som detta och undrar, wow kan man göra sånt på webben ?

Hur många här tror att du kommer jobba med någonting webrelaterat i sitt yrkesliv ? 

Om du svarade Ja på ngn utav dessa tre frågor så har du intresserat dig för javascript på ngn nivå och då är javascript ngt för dig. 

I denna presentationen kommer vi gå igenom följande:

== Expectation Mgmt ==
Har vi några Javascript Ninjas här i lokalen ?
Har vi några som aldrig sätt en kodrad ngnsin i sitt liv ?
Har vi några som vill se mig och ville livekoda lätt förståliga javascript exempel och öka er förståelse i JS ?


== Javascript är ungefär som java ==
* Berätta om att människor har denna myten, även du
* Och för att förstå att det inte är så här så tänkte jag först berätta lite bakgrund


== History of Javascript ==
* 17 years old Brendan Eich 1995, Vi behöver ett scriptingspråk som gör websidor dynamiska
Utvecklade live script, gör så att syntaxen ser mer ut som java
* 1997 integrerade Microsoft in IE i Windows och vann därmed, utvecklingen slutade.
* Flash tog över. Microsoft Svarade med Silverlight
* 1999 AJAX: Outlook Web Access
* 2004: Google, 3 saker har de gjort bra: Gmail och Google Maps (HTML5) och V8
* Möjliggjorde Häftig open source utveckling med HTML5 och Javascript
* Och så här gick det: (Visa bilden)

== Javascript is a scripting language ==


== Basic syntax ==
Räkna upp syntaxen,
berätta att this is it,
I c# finns ArrayList, LinkedList, HashTable, Queues, SortedList, Stack

== JS Functions ==
=== Functions are first class and can have properties ===

var addTwoNumbers = function(a,b) {
return a+b;
};
addTwoNumbers.foo = "bar";
addTwoNumbers;

=== Can be sent to other functions ===
var addTwoNumbers = function(a,b) {
return a + b;
};

var applyFunction = function(a, b, func) {
return func(a,b);
};
log(applyFunction(1,4, addTwoNumbers));


== JS är ett skriptspråk ==
* Lätt att använda, lätt syntax
* Lätta apier mot till exempel filsystem
* läses in direkt från källkoden
* lös struktur, löst typat

== JS is weakly typed ==
* Ad hoc Type Conversion
* Overloading
* no type checking at function calls


== Javascript är objectorienterat ==
* Skapa instanser utav ett object
* Ärva från objekt

1. Skapa nya object;
2. Visa prototype based inheritance
3. Visa this problemet;

=== Object Oriented ===
var myobject = function()
{
this.value = 5;
};
var o = new myobject();
log(o.value);

=== Prototype based ===
var myobject = function()
{
this.value = 5;
};
var o = new myobject();

myobject.prototype.add = function() {
     this.value++;
};
o.add();
log(o.value);

=== This problematic ===
var myobject = function()
{
this.name = "myobject";
};
var o = new myobject();

myobject.prototype.logName = function() {
     log(this.name);
};

o.logName(); 

var context = function(fcn) {
    this.name = "context";
    fcn();
}

context(o.logName);

=== JS is non blocking .. ===
* OM du har så här mycket kod, så kommer javascript köra igenom all kod, kommer ta några hundradelar.
* Asynchrona bibliotek
* Tänka asynchront

var myArray = [0,1,2];
    myArray.forEach(function(item) {
    setTimeout(function() {
    log(item);
    }, Math.random()*11 * 50);
    });
    log("Done");